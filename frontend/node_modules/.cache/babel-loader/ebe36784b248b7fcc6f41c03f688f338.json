{"ast":null,"code":"var _jsxFileName = \"/home/vandrade/Documents/Projects/Personal/keycloak-experiment/frontend/src/components/app/index.tsx\";\nimport React from 'react';\nimport './app.css';\nimport Keycloak from 'keycloak-js';\nimport { KeycloakProvider } from \"@react-keycloak/web\";\nimport { Router } from \"../../routes\";\nimport { configure } from 'axios-hooks';\nimport Axios from 'axios';\nconst keycloak = Keycloak({\n  realm: process.env.REACT_APP_KEYCLOAK_REALM || '',\n  url: process.env.REACT_APP_KEYCLOAK_URL,\n  clientId: process.env.REACT_APP_KEYCLOAK_CLIENT_ID || ''\n});\nconst keycloakProviderInitConfig = {\n  onLoad: 'check-sso',\n  silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html'\n};\nconst axios = Axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com/'\n});\nconfigure({\n  axios,\n  cache: false\n});\nconst App = React.memo(() => {\n  const onKeycloakEvent = (event, error) => {\n    console.log('onKeycloakEvent', event, error);\n  };\n\n  const onKeycloakTokens = tokens => {\n    console.log('onKeycloakTokens', tokens);\n  };\n\n  return /*#__PURE__*/React.createElement(KeycloakProvider, {\n    keycloak: keycloak,\n    initConfig: keycloakProviderInitConfig,\n    onEvent: onKeycloakEvent,\n    onTokens: onKeycloakTokens,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }));\n}); // class App extends React.PureComponent {\n//     onKeycloakEvent = (event: KeycloakEvent, error?: KeycloakError) => {\n//         console.log('onKeycloakEvent', event, error)\n//     }\n//\n//     onKeycloakTokens = (tokens: KeycloakTokens) => {\n//         console.log('onKeycloakTokens', tokens)\n//     }\n//\n//     render() {\n//         return (\n//             <KeycloakProvider\n//                 keycloak={keycloak}\n//                 initConfig={keycloakProviderInitConfig}\n//                 onEvent={this.onKeycloakEvent}\n//                 onTokens={this.onKeycloakTokens}\n//             >\n//                 <AppRouter/>\n//             </KeycloakProvider>\n//         );\n//     }\n// }\n\nexport default App;","map":{"version":3,"sources":["/home/vandrade/Documents/Projects/Personal/keycloak-experiment/frontend/src/components/app/index.tsx"],"names":["React","Keycloak","KeycloakProvider","Router","configure","Axios","keycloak","realm","process","env","REACT_APP_KEYCLOAK_REALM","url","REACT_APP_KEYCLOAK_URL","clientId","REACT_APP_KEYCLOAK_CLIENT_ID","keycloakProviderInitConfig","onLoad","silentCheckSsoRedirectUri","window","location","origin","axios","create","baseURL","cache","App","memo","onKeycloakEvent","event","error","console","log","onKeycloakTokens","tokens"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AAEA,OAAOC,QAAP,MAA+E,aAA/E;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AAEA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,QAA0B,GAAGL,QAAQ,CAAC;AACxCM,EAAAA,KAAK,EAAEC,OAAO,CAACC,GAAR,CAAYC,wBAAZ,IAAwC,EADP;AAExCC,EAAAA,GAAG,EAAEH,OAAO,CAACC,GAAR,CAAYG,sBAFuB;AAGxCC,EAAAA,QAAQ,EAAEL,OAAO,CAACC,GAAR,CAAYK,4BAAZ,IAA4C;AAHd,CAAD,CAA3C;AAMA,MAAMC,0BAA+C,GAAG;AACpDC,EAAAA,MAAM,EAAE,WAD4C;AAEpDC,EAAAA,yBAAyB,EAAEC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GAAyB;AAFA,CAAxD;AAKA,MAAMC,KAAK,GAAGhB,KAAK,CAACiB,MAAN,CAAa;AACvBC,EAAAA,OAAO,EAAE;AADc,CAAb,CAAd;AAIAnB,SAAS,CAAC;AAAEiB,EAAAA,KAAF;AAASG,EAAAA,KAAK,EAAE;AAAhB,CAAD,CAAT;AAEA,MAAMC,GAAa,GAAGzB,KAAK,CAAC0B,IAAN,CAAW,MAAM;AACnC,QAAMC,eAAe,GAAG,CAACC,KAAD,EAAuBC,KAAvB,KAAiD;AACrEC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BH,KAA/B,EAAsCC,KAAtC;AACH,GAFD;;AAIA,QAAMG,gBAAgB,GAAIC,MAAD,IAA4B;AACjDH,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCE,MAAhC;AACH,GAFD;;AAIA,sBACI,oBAAC,gBAAD;AACI,IAAA,QAAQ,EAAE3B,QADd;AAEI,IAAA,UAAU,EAAES,0BAFhB;AAGI,IAAA,OAAO,EAAEY,eAHb;AAII,IAAA,QAAQ,EAAEK,gBAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CADJ;AAWH,CApBqB,CAAtB,C,CAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeP,GAAf","sourcesContent":["import React from 'react';\nimport './app.css';\n\nimport Keycloak, { KeycloakError, KeycloakInitOptions, KeycloakInstance } from 'keycloak-js'\nimport { KeycloakProvider } from \"@react-keycloak/web\";\nimport { KeycloakEvent, KeycloakTokens } from \"@react-keycloak/core\";\nimport { Router } from \"../../routes\";\nimport { configure } from 'axios-hooks'\nimport Axios from 'axios'\n\nconst keycloak: KeycloakInstance = Keycloak({\n    realm: process.env.REACT_APP_KEYCLOAK_REALM || '',\n    url: process.env.REACT_APP_KEYCLOAK_URL,\n    clientId: process.env.REACT_APP_KEYCLOAK_CLIENT_ID || '',\n});\n\nconst keycloakProviderInitConfig: KeycloakInitOptions = {\n    onLoad: 'check-sso',\n    silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html'\n}\n\nconst axios = Axios.create({\n    baseURL: 'https://jsonplaceholder.typicode.com/',\n});\n\nconfigure({ axios, cache: false });\n\nconst App: React.FC = React.memo(() => {\n    const onKeycloakEvent = (event: KeycloakEvent, error?: KeycloakError) => {\n        console.log('onKeycloakEvent', event, error)\n    }\n\n    const onKeycloakTokens = (tokens: KeycloakTokens) => {\n        console.log('onKeycloakTokens', tokens)\n    }\n\n    return (\n        <KeycloakProvider\n            keycloak={keycloak}\n            initConfig={keycloakProviderInitConfig}\n            onEvent={onKeycloakEvent}\n            onTokens={onKeycloakTokens}\n        >\n            {/*<AppRouter/>*/}\n            <Router/>\n        </KeycloakProvider>\n    );\n});\n\n// class App extends React.PureComponent {\n//     onKeycloakEvent = (event: KeycloakEvent, error?: KeycloakError) => {\n//         console.log('onKeycloakEvent', event, error)\n//     }\n//\n//     onKeycloakTokens = (tokens: KeycloakTokens) => {\n//         console.log('onKeycloakTokens', tokens)\n//     }\n//\n//     render() {\n//         return (\n//             <KeycloakProvider\n//                 keycloak={keycloak}\n//                 initConfig={keycloakProviderInitConfig}\n//                 onEvent={this.onKeycloakEvent}\n//                 onTokens={this.onKeycloakTokens}\n//             >\n//                 <AppRouter/>\n//             </KeycloakProvider>\n//         );\n//     }\n// }\n\nexport default App;"]},"metadata":{},"sourceType":"module"}