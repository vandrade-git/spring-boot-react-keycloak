import { createReactKeycloakContext, createReactKeycloakProvider } from '@react-keycloak/core';
import _extends from '@babel/runtime/helpers/extends';
import _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';
import _inheritsLoose from '@babel/runtime/helpers/inheritsLoose';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { createElement, PureComponent, useContext } from 'react';
import hoistStatics from 'hoist-non-react-statics';

var reactKeycloakWebContext = createReactKeycloakContext();

var reactKeycloakProvider = createReactKeycloakProvider(reactKeycloakWebContext);

var getDisplayName = function getDisplayName(name) {
  return "WithKeycloak(" + name + ")";
};

function withKeycloak(WrappedComponent) {
  var Context = reactKeycloakWebContext;
  var displayName = getDisplayName(WrappedComponent.displayName || WrappedComponent.name);

  var WithKeycloakComponent = /*#__PURE__*/function (_React$PureComponent) {
    _inheritsLoose(WithKeycloakComponent, _React$PureComponent);

    function WithKeycloakComponent() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;

      _defineProperty(_assertThisInitialized(_this), "renderWrappedComponent", function (_ref) {
        var initialized = _ref.initialized,
            keycloak = _ref.keycloak;
        return /*#__PURE__*/createElement(WrappedComponent, _extends({}, _this.props, {
          keycloak: keycloak,
          keycloakInitialized: initialized
        }));
      });

      return _this;
    }

    var _proto = WithKeycloakComponent.prototype;

    _proto.render = function render() {
      return /*#__PURE__*/createElement(Context.Consumer, null, this.renderWrappedComponent);
    };

    return WithKeycloakComponent;
  }(PureComponent);

  WithKeycloakComponent.WrappedComponent = WrappedComponent;
  WithKeycloakComponent.displayName = displayName;
  return hoistStatics(WithKeycloakComponent, WrappedComponent);
}

function useKeycloak() {
  var _useContext = useContext(reactKeycloakWebContext),
      initialized = _useContext.initialized,
      keycloak = _useContext.keycloak;

  return Object.assign([keycloak, initialized], {
    initialized: initialized,
    keycloak: keycloak
  });
}

export { reactKeycloakProvider as KeycloakProvider, useKeycloak, withKeycloak };
