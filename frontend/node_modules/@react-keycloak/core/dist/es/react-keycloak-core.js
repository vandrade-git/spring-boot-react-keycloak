import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { createContext, createElement, PureComponent } from 'react';
import _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';
import _inheritsLoose from '@babel/runtime/helpers/inheritsLoose';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import PropTypes from 'prop-types';
import isEqual from 'react-fast-compare';

function createReactKeycloakContext(initialContext) {
  return createContext(_objectSpread({
    initialized: false
  }, initialContext));
}

var initialState = {
  initialized: false,
  isLoading: true,
  token: undefined
};
function createReactKeycloakProvider(ReactKeycloakContext) {
  var KeycloakProvider = /*#__PURE__*/function (_React$PureComponent) {
    _inheritsLoose(KeycloakProvider, _React$PureComponent);

    function KeycloakProvider() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;

      _defineProperty(_assertThisInitialized(_this), "defaultInitConfig", {
        onLoad: 'check-sso',
        promiseType: 'native'
      });

      _defineProperty(_assertThisInitialized(_this), "state", _objectSpread({}, initialState));

      _defineProperty(_assertThisInitialized(_this), "onKeycloakError", function (event) {
        return function (error) {
          var onEvent = _this.props.onEvent; // Notify Events listener

          onEvent && onEvent(event, error);
        };
      });

      _defineProperty(_assertThisInitialized(_this), "updateState", function (event) {
        return function () {
          var _this$props = _this.props,
              keycloak = _this$props.keycloak,
              onEvent = _this$props.onEvent,
              onTokens = _this$props.onTokens,
              isLoadingCheck = _this$props.isLoadingCheck;
          var _this$state = _this.state,
              prevInitialized = _this$state.initialized,
              prevLoading = _this$state.isLoading,
              prevToken = _this$state.token;
          var idToken = keycloak.idToken,
              refreshToken = keycloak.refreshToken,
              newToken = keycloak.token; // Notify Events listener

          onEvent && onEvent(event); // Check Loading state

          var isLoading = isLoadingCheck ? isLoadingCheck(keycloak) : false; // Avoid double-refresh if state hasn't changed

          if (!prevInitialized || isLoading !== prevLoading || newToken !== prevToken) {
            _this.setState({
              initialized: true,
              isLoading: isLoading,
              token: newToken
            });
          } // Notify token listener, if any


          if (newToken !== prevToken) {
            onTokens && onTokens({
              idToken: idToken,
              refreshToken: refreshToken,
              token: newToken
            });
          }
        };
      });

      _defineProperty(_assertThisInitialized(_this), "refreshKeycloakToken", function (event) {
        return function () {
          var _this$props2 = _this.props,
              autoRefreshToken = _this$props2.autoRefreshToken,
              keycloak = _this$props2.keycloak,
              onEvent = _this$props2.onEvent; // Notify Events listener

          onEvent && onEvent(event);

          if (autoRefreshToken) {
            // Refresh Keycloak token
            keycloak.updateToken(5);
          }
        };
      });

      return _this;
    }

    var _proto = KeycloakProvider.prototype;

    _proto.componentDidMount = function componentDidMount() {
      this.init();
    };

    _proto.componentDidUpdate = function componentDidUpdate(_ref) {
      var prevKeycloak = _ref.keycloak,
          prevInitConfig = _ref.initConfig;

      if (this.props.keycloak !== prevKeycloak || !isEqual(this.props.initConfig, prevInitConfig)) {
        // De-init previous Keycloak instance
        prevKeycloak.onReady = undefined;
        prevKeycloak.onAuthSuccess = undefined;
        prevKeycloak.onAuthError = undefined;
        prevKeycloak.onAuthRefreshSuccess = undefined;
        prevKeycloak.onAuthRefreshError = undefined;
        prevKeycloak.onAuthLogout = undefined;
        prevKeycloak.onTokenExpired = undefined; // Reset state

        this.setState(_objectSpread({}, initialState)); // Init new Keycloak instance

        this.init();
      }
    };

    _proto.init = function init() {
      var _this$props3 = this.props,
          initConfig = _this$props3.initConfig,
          keycloak = _this$props3.keycloak; // Attach Keycloak listeners

      keycloak.onReady = this.updateState('onReady');
      keycloak.onAuthSuccess = this.updateState('onAuthSuccess');
      keycloak.onAuthError = this.onKeycloakError('onAuthError');
      keycloak.onAuthRefreshSuccess = this.updateState('onAuthRefreshSuccess');
      keycloak.onAuthRefreshError = this.onKeycloakError('onAuthRefreshError');
      keycloak.onAuthLogout = this.updateState('onAuthLogout');
      keycloak.onTokenExpired = this.refreshKeycloakToken('onTokenExpired');
      keycloak.init(_objectSpread(_objectSpread({}, this.defaultInitConfig), initConfig)).catch(this.onKeycloakError('onInitError'));
    };

    _proto.render = function render() {
      var _this$props4 = this.props,
          children = _this$props4.children,
          keycloak = _this$props4.keycloak,
          LoadingComponent = _this$props4.LoadingComponent;
      var _this$state2 = this.state,
          initialized = _this$state2.initialized,
          isLoading = _this$state2.isLoading;

      if (!!LoadingComponent && (!initialized || isLoading)) {
        return LoadingComponent;
      }

      return /*#__PURE__*/createElement(ReactKeycloakContext.Provider, {
        value: {
          initialized: initialized,
          keycloak: keycloak
        }
      }, children);
    };

    return KeycloakProvider;
  }(PureComponent);

  process.env.NODE_ENV !== "production" ? KeycloakProvider.propTypes = {
    children: PropTypes.element.isRequired,
    keycloak: PropTypes.shape({
      init: PropTypes.func.isRequired,
      updateToken: PropTypes.func.isRequired,
      idToken: PropTypes.string,
      refreshToken: PropTypes.string,
      token: PropTypes.string,
      onReady: PropTypes.func,
      onAuthSuccess: PropTypes.func,
      onAuthError: PropTypes.func,
      onAuthRefreshSuccess: PropTypes.func,
      onAuthRefreshError: PropTypes.func,
      onAuthLogout: PropTypes.func,
      onTokenExpired: PropTypes.func
    }).isRequired,
    autoRefreshToken: PropTypes.bool,
    initConfig: PropTypes.shape({}),
    isLoadingCheck: PropTypes.func,
    LoadingComponent: PropTypes.element,
    onError: PropTypes.func,
    onEvent: PropTypes.func,
    onTokens: PropTypes.func
  } : void 0;
  KeycloakProvider.defaultProps = {
    autoRefreshToken: true,
    initConfig: {
      onLoad: 'check-sso',
      promiseType: 'native'
    },
    isLoadingCheck: null,
    LoadingComponent: null,
    onError: null,
    onEvent: null,
    onTokens: null
  };
  return KeycloakProvider;
}

export { createReactKeycloakContext, createReactKeycloakProvider };
